#TODO: use the same env name specified in your environment.yaml file
CONDA_ENV_NAME = ml_template
#TODO: change the package name with your own
PYTHON_PACKAGE_PATH = src/ml_template
SRC_DIR = src
TEST_DIR = tests
#TODO: configure with your python verison
PYTHON_VERSION = 3.11

# ENVIRONMENT MANAGEMENT ###############################################################################################

.PHONY: help install-env install-pack update-env remove-env

help:
	@echo "-------------------------------------------------------------------------"
	@echo "Makefile for $(CONDA_ENV_NAME)"
	@echo "-------------------------------------------------------------------------"
	@echo "Environment:"
	@echo "  install-env    Creates the Conda environment '$(CONDA_ENV_NAME)' from environment.yaml (if it doesn't exist)."
	@echo "  install-pack   Makes sure that the environment is installed and then tries to install the package in '$(PYTHON_PACKAGE_PATH)'."
	@echo "  update-env     Updates the existing Conda environment with environment.yaml."
	@echo "  remove-env     Remove the '$(CONDA_ENV_NAME)' Conda environment."
	@echo ""
	@echo "Development and Testing:"
	@echo "  lint           Executes linting and style controls (Ruff/Black/Flake8...)."
	@echo "  format         Applies code formating (Black/Ruff...)."
	@echo "  test           Executes all tests with pytest."
	@echo "  test-cov       Exectues tests with pytest and shows the coverage report."
	@echo ""
	@echo "Main Execution (ML):"
	@echo "  train          Executes the main training script (train.py)."
	@echo "                 Use 'ARGS=\"<hydra_overrides>\"' to provide CLI arguments."
	@echo "                 Example: make train ARGS=\"logger=wandb trainer.max_epochs=10\""
	@echo "  predict        Executes the inference script (predict.py)."
	@echo "                 Use 'ARGS=\"<hydra_overrides>\"' to provide CLI arguments."
	@echo "                 Example: make predict ARGS=\"ckpt_path=path/to/model.ckpt\""
	@echo ""
	@echo "Cleaning:"
	@echo "  clean          Removes temporary Python files and test's cache."
	@echo "  clean-outputs  Removes the 'outputs/' directory generated by Hydra (WARNING!)."
	@echo "-------------------------------------------------------------------------"

install-pack:
	@make install-env
	@pip install -e .

install-env:
	@conda env list | grep -q "^$(CONDA_ENV_NAME)\s" || conda env create -f environment.yaml
	@make update-env

update-env:
	@echo ">>> Updating the Conda environment '$(CONDA_ENV_NAME)'..."
	@conda env update -f environment.yaml --prune

remove-env:
	@echo ">>> Removing the '$(CONDA_ENV_NAME)' Conda environment"
	@conda deactivate || true 
	@conda env remove --name $(CONDA_ENV_NAME) -y

# DEV AND TESTING ######################################################################################################

.PHONY: lint format test test-cov

lint:
	@echo ">>> Executing linting (Ruff)"
	@conda run -n $(CONDA_ENV_NAME) ruff check $(SRC_DIR) $(TEST_DIR)
	@echo ">>> Checking code formatting (Black)"
	@conda run -n $(CONDA_ENV_NAME) black --check $(SRC_DIR) $(TEST_DIR)

format:
	@echo ">>> Code formatting (Ruff)"
	@conda run -n $(CONDA_ENV_NAME) ruff format $(SRC_DIR) $(TEST_DIR)
	@echo ">>> Code formatting (Black)"
	@conda run -n $(CONDA_ENV_NAME) black $(SRC_DIR) $(TEST_DIR)

test:
	@echo ">>> Executing Test (pytest)"
	@conda run -n $(CONDA_ENV_NAME) pytest $(TEST_DIR)

test-cov:
	@echo ">>> Executing Test with Coverage (pytest)..."
	@conda run -n $(CONDA_ENV_NAME) pytest --cov=$(SRC_DIR) --cov-report=term-missing $(TEST_DIR)


# MAIN EXECUTION #######################################################################################################

.PHONY: train predict

ARGS = ""

train:
	@echo ">>> Executing Training (train.py)..."
	@conda run -n $(CONDA_ENV_NAME) python $(PYTHON_PACKAGE_PATH)/train.py $(ARGS)

predict:
	@echo ">>> Executing Inference (predict.py)..."
	@conda run -n $(CONDA_ENV_NAME) python $(PYTHON_PACKAGE_PATH)/predict.py $(ARGS)


# CLEANING #############################################################################################################

.PHONY: clean clean-outputs

clean:
	@echo ">>> Removing temp Python files and cache..."
	@find . -type f -name "*.py[co]" -delete
	@find . -type d -name "__pycache__" -exec rm -rf {} +
	@find . -type d -name ".pytest_cache" -exec rm -rf {} +
	@rm -rf build/ dist/ *.egg-info/

clean-outputs:
	@echo ">>> WARNING: Removing directory 'outputs/'"
	@rm -rf outputs/

.DEFAULT_GOAL := help